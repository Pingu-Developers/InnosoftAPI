{   
    "$defs" : {
        "queries" : {
            "events" : "SELECT ID,post_title,\n      MAX(CASE WHEN meta_key='mec_start_date' THEN meta_value END) AS start,\n      MAX(CASE WHEN meta_key='mec_end_date' THEN meta_value END) AS end,\n      MAX(CASE WHEN meta_key='mec_start_day_seconds' THEN meta_value END) AS time_start,\n      MAX(CASE WHEN meta_key='mec_end_day_seconds' THEN meta_value END) AS time_end,\n      MAX(CASE WHEN meta_key='mec_organizer_id' THEN (SELECT name FROM wp_terms WHERE term_id=meta_value) END) AS organizer,\n      MAX(CASE WHEN meta_key='mec_location_id' THEN (SELECT name FROM wp_terms WHERE term_id=meta_value) END) AS location\n    FROM wp_posts\n    RIGHT JOIN wp_postmeta ON ID=post_id\n    WHERE post_type = 'mec-events' and post_status not like 'auto-draft'\n    GROUP BY ID;",
            "eventId": "SELECT ID,post_title,\n      MAX(CASE WHEN meta_key='mec_start_date' THEN meta_value END) AS start,\n      MAX(CASE WHEN meta_key='mec_end_date' THEN meta_value END) AS end,\n      MAX(CASE WHEN meta_key='mec_start_day_seconds' THEN meta_value END) AS time_start,\n      MAX(CASE WHEN meta_key='mec_end_day_seconds' THEN meta_value END) AS time_end,\n      MAX(CASE WHEN meta_key='mec_organizer_id' THEN (SELECT name FROM wp_terms WHERE term_id=meta_value) END) AS organizer,\n      MAX(CASE WHEN meta_key='mec_location_id' THEN (SELECT name FROM wp_terms WHERE term_id=meta_value) END) AS location\n    FROM wp_posts\n    RIGHT JOIN wp_postmeta ON ID=post_id\n    WHERE post_type = 'mec-events' and post_status not like 'auto-draft' and ID=?\n    GROUP BY ID;",
            "posts": "SELECT p.ID,post_title,post_content,post_date,display_name FROM wp_posts p \n  RIGHT JOIN wp_users u ON post_author = u.ID WHERE post_type='post' AND post_status='publish' \n  ORDER BY p.post_date DESC;",
            "postId": "SELECT p.ID,post_title,post_content,post_date,display_name FROM wp_posts p \n  RIGHT JOIN wp_users u ON post_author = u.ID WHERE post_type='post' AND post_status='publish' \n  AND p.ID=? ORDER BY p.post_date DESC;",
            "speakers": "SELECT \n      ID,\n      MAX(CASE WHEN meta_key='_cl_first_name' THEN meta_value END) AS NAME,\n      MAX(CASE WHEN meta_key='_cl_last_name' THEN meta_value ELSE '' END) AS SURNAME,\n      MAX(CASE WHEN meta_key='_cl_job_title' THEN meta_value END) AS JOBTITLE,\n      MAX(CASE WHEN meta_key='_cl_custom_field_1' THEN meta_value END) AS DESCRIPTION,\n      MAX(CASE WHEN meta_key='_cl_email' THEN meta_value END) AS EMAIL,\n      MAX(CASE WHEN meta_key='_cl_linkedin_url' THEN meta_value END) AS LINKEDIN,\n      MAX(CASE WHEN meta_key='_cl_twitter_url' THEN meta_value END) AS TWITTER,\n      MAX(CASE WHEN meta_key='_cl_facebook_url' THEN meta_value END) AS FACEBOOK\n  FROM wp_posts RIGHT JOIN wp_postmeta ON ID=post_id \n  WHERE post_type=\"contact\" AND post_status=\"publish\" GROUP BY ID;",
            "speakerId": "SELECT \n      ID,\n      MAX(CASE WHEN meta_key='_cl_first_name' THEN meta_value END) AS NAME,\n      MAX(CASE WHEN meta_key='_cl_last_name' THEN meta_value ELSE '' END) AS SURNAME,\n      MAX(CASE WHEN meta_key='_cl_job_title' THEN meta_value END) AS JOBTITLE,\n      MAX(CASE WHEN meta_key='_cl_custom_field_1' THEN meta_value END) AS DESCRIPTION,\n      MAX(CASE WHEN meta_key='_cl_email' THEN meta_value END) AS EMAIL,\n      MAX(CASE WHEN meta_key='_cl_linkedin_url' THEN meta_value END) AS LINKEDIN,\n      MAX(CASE WHEN meta_key='_cl_twitter_url' THEN meta_value END) AS TWITTER,\n      MAX(CASE WHEN meta_key='_cl_facebook_url' THEN meta_value END) AS FACEBOOK\n  FROM wp_posts RIGHT JOIN wp_postmeta ON ID=post_id \n  WHERE post_type=\"contact\" AND post_status=\"publish\" AND ID=? GROUP BY ID;"
        },
        "results" : {
            "empty" : [],
            "one_event": [
                {
                    "ID": "1",
                    "post_title": "Event 1",
                    "start": "2016-01-01",
                    "end": "2016-01-01",
                    "time_start": "30600",
                    "time_end": "30800",
                    "organizer": "Test Person",
                    "location" : "Sin categoria"
                }
            ],
            "two_events" : [
                {
                    "ID": "1",
                    "post_title": "Event 1",
                    "start": "2016-01-01",
                    "end": "2016-01-01",
                    "time_start": "30600",
                    "time_end": "30800",
                    "organizer": "Sin categoria"
                },
                {
                    "ID": "2",
                    "post_title": "Event 2",
                    "start": "2016-01-01",
                    "end": "2016-01-01",
                    "time_start": "30600",
                    "time_end": "30800",
                    "location": "Test Location"
                }
            ],
            "null_date_events" : [
                {
                    "ID": "1",
                    "post_title": "Event 1",
                    "start": "2016-01-01",
                    "end": null,
                    "time_start": null,
                    "time_end": null
                }
            ],
            "wrong_date_event": [
                {
                    "ID": "3",
                    "post_title": "Wrong event",
                    "start": "20162-0101",
                    "end": "201116-r01-01",
                    "time_start": "30600",
                    "time_end": "30800"
                }
            ],
            "one_post" : [
                {
                    "ID": "1",
                    "post_title": "Post 1",
                    "post_content": "This is the content of post 1",
                    "post_date": "2016-01-01 10:10:01",
                    "display_name": "John Doe"
                }
            ],
            "two_posts" : [
                {
                    "ID": "1",
                    "post_title": "Post 1",
                    "post_content": "This is the content of post 1",
                    "post_date": "2016-01-01 10:10:01",
                    "display_name": "John Doe"
                },
                {
                    "ID": "2",
                    "post_title": "Post 2",
                    "post_content": "This is the content of post 2",
                    "post_date": "2018-01-01 10:10:01",
                    "display_name": "John Doe"
                }
            ],
            "one_speaker" : [
                {
                    "ID": "1",
                    "NAME": "John",
                    "SURNAME": "Doe",
                    "JOBTITLE": "Engineer",
                    "DESCRIPTION": "This is a description of Jon Doe",
                    "EMAIL": "john@doe.com",
                    "LINKEDIN": null,
                    "TWITTER": null,
                    "FACEBOOK": null
                }
            ],
            "two_speakers" : [
                {
                    "ID": "1",
                    "NAME": "John",
                    "SURNAME": "Doe",
                    "DESCRIPTION": "This is a description of Jon Doe",
                    "EMAIL": null,
                    "LINKEDIN" : "https://link-to-linkedin.test",
                    "TWITTER": "https://link-to-twitter.test",
                    "FACEBOOK": null
                },
                {
                    "ID": "2",
                    "NAME": "Jane",
                    "SURNAME": "Doe",
                    "JOBTITLE": "Engineer",
                    "DESCRIPTION": "This is a description of Jane Doe",
                    "EMAIL": "john@doe.com",
                    "LINKEDIN" : "https://link-to-linkedin.test",
                    "TWITTER": "https://link-to-twitter.test",
                    "FACEBOOK": "https://link-to-facebook.test"
                }
            ],
            "one_message" : [
                {
                    "_id" : "61d4fb42d10f06311e8fc4db",
                    "text" : "This is the text of the message",
                    "datetime" : "2016-01-01T10:10:01Z",
                    "room" : "general",
                    "user" : {
                        "_id" : "61d4fb42d10f06311e8fc4dc",
                        "name" : "John Doe",
                        "avatar" : null
                    }
                }
            ]
        },
        "responses" : {
            "empty" : [],
            "one_event": [
                {
                    "eventId": "1",
                    "eventName": "Event 1",
                    "eventStartDateTime": "2016-01-01T08:30:00.000Z",
                    "eventEndDateTime": "2016-01-01T08:33:20.000Z",
                    "eventOrganizer": "Test Person"
                }
            ],
            "two_events" : [
                {
                    "eventId": "1",
                    "eventName": "Event 1",
                    "eventStartDateTime": "2016-01-01T08:30:00.000Z",
                    "eventEndDateTime": "2016-01-01T08:33:20.000Z"
                },
                {
                    "eventId": "2",
                    "eventName": "Event 2",
                    "eventStartDateTime": "2016-01-01T08:30:00.000Z",
                    "eventEndDateTime": "2016-01-01T08:33:20.000Z",
                    "eventLocation" : "Test Location"
                }
            ],
            "one_post" : [
                {
                    "postId": "1",
                    "postTitle": "Post 1",
                    "postContent": "This is the content of post 1",
                    "postDateTime": "2016-01-01T09:10:01.000Z",
                    "postAuthor": "John Doe"
                }
            ],
            "two_posts" : [
                {
                    "postId": "1",
                    "postTitle": "Post 1",
                    "postContent": "This is the content of post 1",
                    "postDateTime": "2016-01-01T09:10:01.000Z",
                    "postAuthor": "John Doe"
                },
                {
                    "postId": "2",
                    "postTitle": "Post 2",
                    "postContent": "This is the content of post 2",
                    "postDateTime": "2018-01-01T09:10:01.000Z",
                    "postAuthor": "John Doe"
                }
            ],
            "one_speaker" : [
                {
                    "speakerId": "1",
                    "speakerName": "John Doe",
                    "speakerDescription": "This is a description of Jon Doe",
                    "speakerJobTitle": "Engineer",
                    "speakerEmail": "john@doe.com"
                }
            ],
            "two_speakers" : [
                {
                    "speakerId": "1",
                    "speakerName": "John Doe",
                    "speakerDescription": "This is a description of Jon Doe",
                    "speakerUrls" : [ "https://link-to-linkedin.test", "https://link-to-twitter.test" ]
                },
                {
                    "speakerId": "2",
                    "speakerName": "Jane Doe",
                    "speakerDescription": "This is a description of Jane Doe",
                    "speakerJobTitle": "Engineer",
                    "speakerEmail": "john@doe.com",
                    "speakerUrls" : [ 
                        "https://link-to-linkedin.test",
                        "https://link-to-twitter.test",
                        "https://link-to-facebook.test"
                    ]
                } 
            ],
            "one_message" : [
                {
                    "messageId" : "61d4fb42d10f06311e8fc4db",
                    "messageText" : "This is the text of the message",
                    "messageDateTime" : "2016-01-01T10:10:01.000Z",
                    "messageRoomId" : "general",
                    "messageUser" : {
                        "userId" : "61d4fb42d10f06311e8fc4dc",
                        "userName" : "John Doe",
                        "userAvatar" : null
                    }
                }
            ]
        }
    },
    "tests" : {
        "api/v1/events": {
            "query" : { "$ref" : "#/$defs/queries/events" },
            "cases" : [
                {   
                    "description" : "Should return no events when empty", 
                    "result" : { "$ref" : "#/$defs/results/empty" },
                    "response" : { "$ref" : "#/$defs/responses/empty"}
                },
                {
                    "description" : "Should return one event",
                    "result" : { "$ref" : "#/$defs/results/one_event" },
                    "response" : { "$ref" : "#/$defs/responses/one_event" }
                },
                {
                    "description" : "Should return two events",
                    "result" : { "$ref" : "#/$defs/results/two_events" },
                    "response" : { "$ref" : "#/$defs/responses/two_events" }
                },
                {
                    "description" : "Should ignore the events when they are invalid",
                    "result":  { "$ref" : "#/$defs/results/null_date_events" },
                    "response" : { "$ref" : "#/$defs/responses/empty" }
                }
            ],
            "negativeCases" : [
                {   
                    "description" : "Should respond with code 500 when database is down", 
                    "code" : 500
                },
                {   
                    "description" : "Should respond with code 500 if method fails", 
                    "result" : "wrong result",
                    "code" : 500
                }
            ]
        },
        "api/v1/events/{eventId}": {
            "query" : { "$ref" : "#/$defs/queries/eventId" },
            "cases" : [
                {   
                    "description" : "Should return event with ID = 1", 
                    "params" : { "eventId" : "1" },
                    "result" : { "$ref" : "#/$defs/results/one_event" },
                    "response" : { "$ref" : "#/$defs/responses/one_event/0"}
                }
            ],
            "negativeCases" : [
                {   
                    "description" : "Should respond with code 500 when database is down", 
                    "params" : { "eventId" : "1" },
                    "code" : 500
                },
                {
                    "description" : "Should respond with code 404 when event does not exist", 
                    "result" : { "$ref" : "#/$defs/results/empty" },
                    "params" : { "eventId" : "3003" },
                    "code" : 404
                },
                {   
                    "params" : { "eventId" : "3003" },
                    "description" : "Should respond with code 500 if method fails", 
                    "result" : { "$ref" : "#/$defs/results/wrong_date_event" },
                    "code" : 500
                },
                {   
                    "params" : { "eventId" : "abcd" },
                    "description" : "Should respond with code 400 if param is invalid", 
                    "code" : 400
                },
                {   
                    "params" : { "eventId" : "2" },
                    "description" : "Should respond with code 406 result contain invalid fields",
                    "result" : { "$ref" : "#/$defs/results/null_date_events" },
                    "code" : 406
                }
            ]
        },
        "api/v1/posts": {
            "query" : { "$ref" : "#/$defs/queries/posts" },
            "cases" : [
                {   
                    "description" : "Should return no posts when empty", 
                    "result" : { "$ref" : "#/$defs/results/empty" },
                    "response" : { "$ref" : "#/$defs/responses/empty"}
                },
                {
                    "description" : "Should return one post",
                    "result" : { "$ref" : "#/$defs/results/one_post" },
                    "response" : { "$ref" : "#/$defs/responses/one_post"}
                },
                {
                    "description" : "Should return two posts",
                    "result" : { "$ref" : "#/$defs/results/two_posts" },
                    "response" : { "$ref" : "#/$defs/responses/two_posts"}
                }
            ],
            "negativeCases" : [
                {   
                    "description" : "Should respond with code 500 when database is down", 
                    "code" : 500
                },
                {   
                    "description" : "Should respond with code 500 if method fails", 
                    "result" : "wrong result",
                    "code" : 500
                }
            ]
        },
        "api/v1/posts/{postId}": {
            "query" : { "$ref" : "#/$defs/queries/postId" },
            "cases" : [
                {   
                    "description" : "Should return post with ID = 1", 
                    "params" : { "postId" : "1" },
                    "result" : { "$ref" : "#/$defs/results/one_post" },
                    "response" : { "$ref" : "#/$defs/responses/one_post/0"}
                }
            ],
            "negativeCases" : [
                {   
                    "description" : "Should respond with code 500 when database is down", 
                    "params" : { "postId" : "1" },
                    "code" : 500
                },
                {
                    "description" : "Should respond with code 404 when event does not exist", 
                    "result" : { "$ref" : "#/$defs/results/empty" },
                    "params" : { "postId" : "3003" },
                    "code" : 404
                },
                {   
                    "params" : { "postId" : "3003" },
                    "description" : "Should respond with code 500 if method fails", 
                    "result" : "wrong result",
                    "code" : 500
                },
                {   
                    "params" : { "postId" : "abcd" },
                    "description" : "Should respond with code 400 if param is invalid", 
                    "code" : 400
                }
            ]
        },
        "api/v1/speakers": {
            "query" : { "$ref" : "#/$defs/queries/speakers" },
            "cases" : [
                {   
                    "description" : "Should return no speakers when empty", 
                    "result" : { "$ref" : "#/$defs/results/empty" },
                    "response" : { "$ref" : "#/$defs/responses/empty"}
                },
                {
                    "description" : "Should return one speaker",
                    "result" : { "$ref" : "#/$defs/results/one_speaker" },
                    "response" : { "$ref" : "#/$defs/responses/one_speaker"}
                },
                {
                    "description" : "Should return two speakers",
                    "result" : { "$ref" : "#/$defs/results/two_speakers" },
                    "response" : { "$ref" : "#/$defs/responses/two_speakers"}
                }
            ],
            "negativeCases" : [
                {   
                    "description" : "Should respond with code 500 when database is down", 
                    "code" : 500
                },
                {   
                    "description" : "Should respond with code 500 if method fails", 
                    "result" : "wrong result",
                    "code" : 500
                }
            ]
        },
        "api/v1/speakers/{speakerId}": {
            "query" : { "$ref" : "#/$defs/queries/speakerId" },
            "cases" : [
                {   
                    "description" : "Should return speaker with ID = 1 with no URLS", 
                    "params" : { "speakerId" : "1" },
                    "result" : { "$ref" : "#/$defs/results/one_speaker" },
                    "response" : { "$ref" : "#/$defs/responses/one_speaker/0"}
                },
                {
                    "description" : "Should return speaker with ID = 1 with email and no URLS", 
                    "params" : { "speakerId" : "2" },
                    "result" : [{ "$ref" : "#/$defs/results/two_speakers/0" }],
                    "response" : { "$ref" : "#/$defs/responses/two_speakers/0"}
                },
                {
                    "description" : "Should return speaker with ID = 2 with all attributes", 
                    "params" : { "speakerId" : "2" },
                    "result" : [{ "$ref" : "#/$defs/results/two_speakers/1" }],
                    "response" : { "$ref" : "#/$defs/responses/two_speakers/1"}
                }   
            ],
            "negativeCases" : [
                {   
                    "description" : "Should respond with code 500 when database is down", 
                    "params" : { "speakerId" : "1" },
                    "code" : 500
                },
                {
                    "description" : "Should respond with code 404 when speaker does not exist", 
                    "result" : { "$ref" : "#/$defs/results/empty" },
                    "params" : { "speakerId" : "3003" },
                    "code" : 404
                },
                {   
                    "params" : { "speakerId" : "3003" },
                    "description" : "Should respond with code 500 if query returns invalid type", 
                    "result" : "wrong result",
                    "code" : 500
                },
                {   
                    "params" : { "speakerId" : "3003" },
                    "description" : "Should respond with code 500 if method fails", 
                    "result" : null,
                    "code" : 500
                },
                {   
                    "params" : { "speakerId" : "abcd" },
                    "description" : "Should respond with code 400 if param is invalid", 
                    "code" : 400
                }
            ]
        },
        "api/v1/messages/{roomId}": {
            "cases" : [
                {   
                    "description" : "Should return no messages when empty", 
                    "params" : { "roomId" : "general" },
                    "result" : { "$ref" : "#/$defs/results/empty" },
                    "response" : { "$ref" : "#/$defs/responses/empty"}
                },
                {
                    "description" : "Should return one message", 
                    "params" : { "roomId" : "general" },
                    "result" : { "$ref" : "#/$defs/results/one_message" },
                    "response" : { "$ref" : "#/$defs/responses/one_message"}
                }
            ],
            "negativeCases" : [
                {
                    "description" : "Should respond with code 500 when unexpected error occurs", 
                    "result" : "wrong result",
                    "params" : { "roomId" : "general" },
                    "code" : 500
                }
            ]
        }
    }
}