{   
    "$defs" : {
        "queries" : {
            "events" : "SELECT posts.ID,post_title,start,end,time_start,time_end \n    FROM wp_posts posts RIGHT JOIN wp_mec_events ev on posts.ID = ev.post_id \n    WHERE post_type = 'mec-events' and post_status not like 'auto-draft';",
            "eventId": "SELECT posts.ID,post_title,start,end,time_start,time_end \n    FROM wp_posts posts RIGHT JOIN wp_mec_events ev on posts.ID = ev.post_id \n    WHERE post_type = 'mec-events' and post_status not like 'auto-draft' and posts.ID=?;"
        },
        "results" : {
            "empty" : [],
            "one_event": [
                {
                    "ID": "1",
                    "post_title": "Event 1",
                    "start": "2016-01-01",
                    "end": "2016-01-01",
                    "time_start": "30600",
                    "time_end": "30800"
                }
            ],
            "two_events" : [
                {
                    "ID": "1",
                    "post_title": "Event 1",
                    "start": "2016-01-01",
                    "end": "2016-01-01",
                    "time_start": "30600",
                    "time_end": "30800"
                },
                {
                    "ID": "2",
                    "post_title": "Event 2",
                    "start": "2016-01-01",
                    "end": "2016-01-01",
                    "time_start": "30600",
                    "time_end": "30800"
                }
            ],
            "weird_date" : [
                {
                    "ID": "1",
                    "post_title": "Event 1",
                    "start": "2016-01-01",
                    "end": "0000-00-00",
                    "time_start": "30600",
                    "time_end": "30800"
                }
            ]
        },
        "responses" : {
            "empty" : [],
            "one_event": [
                {
                    "eventId": "1",
                    "eventName": "Event 1",
                    "eventStartDateTime": "2016-01-01T08:30:00.000Z",
                    "eventEndDateTime": "2016-01-01T08:33:20.000Z"
                }
            ],
            "two_events" : [
                {
                    "eventId": "1",
                    "eventName": "Event 1",
                    "eventStartDateTime": "2016-01-01T08:30:00.000Z",
                    "eventEndDateTime": "2016-01-01T08:33:20.000Z"
                },
                {
                    "eventId": "2",
                    "eventName": "Event 2",
                    "eventStartDateTime": "2016-01-01T08:30:00.000Z",
                    "eventEndDateTime": "2016-01-01T08:33:20.000Z"
                }
            ],
            "weird_date": [
                {
                    "eventId": "1",
                    "eventName": "Event 1",
                    "eventStartDateTime": "2016-01-01T08:30:00.000Z",
                    "eventEndDateTime": "2016-01-01T08:33:20.000Z"
                }
            ]
        }
    },
    "tests" : {
        "api/v1/events": {
            "query" : { "$ref" : "#/$defs/queries/events" },
            "cases" : [
                {   
                    "description" : "Should return no events when empty", 
                    "result" : { "$ref" : "#/$defs/results/empty" },
                    "response" : { "$ref" : "#/$defs/responses/empty"}
                },
                {
                    "description" : "Should return one event",
                    "result" : { "$ref" : "#/$defs/results/one_event" },
                    "response" : { "$ref" : "#/$defs/responses/one_event" }
                },
                {
                    "description" : "Should return two events",
                    "result" : { "$ref" : "#/$defs/results/two_events" },
                    "response" : { "$ref" : "#/$defs/responses/two_events" }
                },
                {
                    "description" : "Should have end date equal to start date if end date is 0000-00-00",
                    "result":  { "$ref" : "#/$defs/results/weird_date" },
                    "response" : { "$ref" : "#/$defs/responses/weird_date" }
                }
            ],
            "negativeCases" : [
                {   
                    "description" : "Should respond with code 500 when database is down", 
                    "code" : 500
                },
                {   
                    "description" : "Should respond with code 500 if method fails", 
                    "result" : "wrong result",
                    "code" : 500
                }
            ]
        },
        "api/v1/events/{eventId}": {
            "query" : { "$ref" : "#/$defs/queries/eventId" },
            "cases" : [
                {   
                    "description" : "Should return event with ID = 1", 
                    "params" : { "eventId" : "1" },
                    "result" : { "$ref" : "#/$defs/results/one_event" },
                    "response" : { "$ref" : "#/$defs/responses/one_event/0"}
                }
            ],
            "negativeCases" : [
                {   
                    "description" : "Should respond with code 500 when database is down", 
                    "params" : { "eventId" : "1" },
                    "code" : 500
                },
                {
                    "description" : "Should respond with code 404 when event does not exist", 
                    "result" : { "$ref" : "#/$defs/results/empty" },
                    "params" : { "eventId" : "3003" },
                    "code" : 404
                },
                {   
                    "params" : { "eventId" : "3003" },
                    "description" : "Should respond with code 500 if method fails", 
                    "result" : "wrong result",
                    "code" : 500
                },
                {   
                    "params" : { "eventId" : "abcd" },
                    "description" : "Should respond with code 400 if param is invalid", 
                    "code" : 400
                }
            ]
        }
    }
}