openapi: 3.0.0
info:
  version: 1.3.0
  title: Innosoft API
  description: >-
    Service to expose innosoft database as a RESTFUL API following Open Api v3
    specification. 
  contact:
    name: Pingu Developers
    email: pingudevelop@gmail.com
    url: 'https://github.com/orgs/Pingu-Developers'
  license:
    name: MIT
    url: 'http://opensource.org/licenses/MIT'
paths:
  /api/v1/events:
    get:
      description: Returns all events
      operationId: getEvents
      responses:
        '200':
          description: Events list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/event'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /api/v1/events/{eventId}:
    get:
      description: Returns an event by eventId
      operationId: findEventByEventId
      parameters:
        - name: eventId
          in: path
          description: eventId of event to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '400':
          description: Invalid eventId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /api/v1/speakers:
    get:
      description: Returns all speakers
      operationId: getSpeakers
      responses:
        '200':
          description: Speakers list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/speaker'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /api/v1/speakers/{speakerId}:
    get:
      description: Returns a speaker by speakerId
      operationId: findSpeakerBySpeakerId
      parameters:
        - name: speakerId
          in: path
          description: speakerId of speaker to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Speaker returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/speaker'
        '404':
          description: Speaker not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '400':
          description: Invalid speakerId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /api/v1/posts:
    get:
      description: Returns all posts
      operationId: getPosts
      responses:
        '200':
          description: Posts list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/post'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /api/v1/posts/{postId}:
    get:
      description: Returns a post by postId
      operationId: findPostByPostId
      parameters:
        - name: postId
          in: path
          description: postId of post to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '400':
          description: Invalid postId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /api/v1/messages/{roomId}:
    get:
      description: Returns all messages from a room
      operationId: findMessagesByRoomId
      parameters:
        - name: roomId
          in: path
          description: roomId of messages to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Messages returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/message'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '400':
          description: Invalid roomId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      description: Post a new message to a room
      operationId: addMessageByRoomId
      parameters:
        - name: roomId
          in: path
          description: roomId of message to add
          required: true
          schema:
            type: string
      requestBody:
        x-name: message
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/message'
        description: Message to be added
        required: true
      responses:
        '201':
          description: Message posted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
components:
  schemas:
    errorModel:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    event:
      type: object
      required:
        - eventId
        - eventName
        - eventStartDateTime
        - eventEndDateTime
      properties:
        eventId:
          type: integer
          format: int32
        eventName:
          type: string
        eventStartDateTime:
          type: string
          format: date-time
        eventEndDateTime:
          type: string
          format: date-time
        eventTags:
          type: array
          items:
            type: string
        eventOrganizer:
          type: string
        eventLocation:
          type: string
    speaker:
      type: object
      required:
        - speakerId
        - speakerName
        - speakerDescription
      properties:
        speakerId:
          type: integer
          format: int32
        speakerName:
          type: string
        speakerJob:
          type: string
        speakerDescription:
          type: string
        speakerEmail:
          type: string
        speakerUrls:
          type: array
          items:
            type: string
    post:
      type: object
      required:
        - postId
        - postTitle
        - postContent
        - postDateTime
        - postAuthor
      properties:
        postId:
          type: integer
          format: int32
        postTitle:
          type: string
        postContent:
          type: string
        postDateTime:
          type: string
          format: date-time
        postAuthor:
          type: string
    message:
      type: object
      required:
        - messageText
        - messageDateTime
        - messageUser
      properties:
        messageId:
          type: string
        messageText:
          type: string
        messageDateTime:
          type: string
          format: date-time
        messageUser:
          type: object
          required:
            - userName
          properties:
            userId:
              type: string
            userName:
              type: string
            userAvatar:
              type: string
          